



































































































































};  }    res.status(500).json({ error: "Error fetching messages" });  } catch (error) {    res.json(group.messages);    if (!group) return res.status(404).json({ error: "Group not found" });    const group = await MessageGroup.findById(groupId).populate("messages.sender", "firstName lastName email avatar");    const { groupId } = req.params;  try {exports.getMessages = async (req, res) => {};  }    res.status(500).json({ message: "Internal Server Error", error: error.message });    console.error("Error deleting message group:", error);  } catch (error) {    res.status(200).json({ message: "Message group deleted successfully" });    );      { $pull: { messageGroups: messageGroupId } }      { _id: deletedMessageGroup.team },    await Team.updateOne(    // Remove message group from team    }      return res.status(404).json({ message: "Message group not found." });    if (!deletedMessageGroup) {    const deletedMessageGroup = await MessageGroup.findByIdAndDelete(messageGroupId);    // Find and delete message group    }      return res.status(400).json({ message: "Invalid message group ID." });    if (!mongoose.Types.ObjectId.isValid(messageGroupId)) {    // Validate message group ID    const { messageGroupId } = req.params;  try {exports.deleteMessageGroup = async (req, res) => {// Delete a message group};  }    res.status(500).json({ message: "Internal Server Error", error: error.message });    console.error("Error updating message group:", error);  } catch (error) {    res.status(200).json({ message: "Message group updated successfully", messageGroup: updatedMessageGroup });    }      return res.status(404).json({ message: "Message group not found." });    if (!updatedMessageGroup) {    );      { new: true }      { name, members },      messageGroupId,    const updatedMessageGroup = await MessageGroup.findByIdAndUpdate(    // Find and update message group    }      return res.status(400).json({ message: "Invalid message group ID." });    if (!mongoose.Types.ObjectId.isValid(messageGroupId)) {    // Validate message group ID    const { name, members } = req.body;    const { messageGroupId } = req.params;  try {exports.editMessageGroup = async (req, res) => {// Edit a message group};  }    res.status(500).json({ message: "Internal Server Error", error: error.message });    console.error("Error fetching message groups:", error);  } catch (error) {    res.status(200).json(messageGroups);    const messageGroups = await MessageGroup.find({ team: teamId }).populate("members", "fname lname email");    // Find message groups    }      return res.status(400).json({ message: "Invalid team ID." });    if (!mongoose.Types.ObjectId.isValid(teamId)) {    // Validate team ID    const { teamId } = req.params;  try {exports.getMessageGroupsByTeam = async (req, res) => {// Read message groups by team ID};  }    res.status(500).json({ message: "Internal Server Error", error: error.message });    console.error("Error creating message group:", error);  } catch (error) {    res.status(201).json({ message: "Message group created successfully", messageGroup: newMessageGroup });    await team.save();    team.messageGroups.push(newMessageGroup._id);    // Add message group to team    await newMessageGroup.save();    // Save message group to DB    });      createdBy      members,      name,      team: teamId,    const newMessageGroup = new MessageGroup({    // Create message group    }      return res.status(404).json({ message: "Team not found." });    if (!team) {    const team = await Team.findById(teamId);    // Check if team exists    }      return res.status(400).json({ message: "Team ID and name are required." });    if (!teamId || !name) {    // Validate required fields    const { teamId, name, members, createdBy } = req.body;  try {exports.createMessageGroup = async (req, res) => {// Create a new message groupconst Team = require('../models/Team');const Event = require('../models/Event');const mongoose = require("mongoose");const { MessageGroup, Team } = require("../models/Team");